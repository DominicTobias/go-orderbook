// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package orderbook

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderbookClient is the client API for Orderbook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderbookClient interface {
	AddOrder(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderReply, error)
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderReply, error)
	AmendOrder(ctx context.Context, in *AmendOrderRequest, opts ...grpc.CallOption) (*AmendOrderReply, error)
}

type orderbookClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderbookClient(cc grpc.ClientConnInterface) OrderbookClient {
	return &orderbookClient{cc}
}

func (c *orderbookClient) AddOrder(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderReply, error) {
	out := new(AddOrderReply)
	err := c.cc.Invoke(ctx, "/orderbook.Orderbook/AddOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderbookClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderReply, error) {
	out := new(CancelOrderReply)
	err := c.cc.Invoke(ctx, "/orderbook.Orderbook/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderbookClient) AmendOrder(ctx context.Context, in *AmendOrderRequest, opts ...grpc.CallOption) (*AmendOrderReply, error) {
	out := new(AmendOrderReply)
	err := c.cc.Invoke(ctx, "/orderbook.Orderbook/AmendOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderbookServer is the server API for Orderbook service.
// All implementations must embed UnimplementedOrderbookServer
// for forward compatibility
type OrderbookServer interface {
	AddOrder(context.Context, *AddOrderRequest) (*AddOrderReply, error)
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderReply, error)
	AmendOrder(context.Context, *AmendOrderRequest) (*AmendOrderReply, error)
	mustEmbedUnimplementedOrderbookServer()
}

// UnimplementedOrderbookServer must be embedded to have forward compatible implementations.
type UnimplementedOrderbookServer struct {
}

func (UnimplementedOrderbookServer) AddOrder(context.Context, *AddOrderRequest) (*AddOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrder not implemented")
}
func (UnimplementedOrderbookServer) CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderbookServer) AmendOrder(context.Context, *AmendOrderRequest) (*AmendOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AmendOrder not implemented")
}
func (UnimplementedOrderbookServer) mustEmbedUnimplementedOrderbookServer() {}

// UnsafeOrderbookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderbookServer will
// result in compilation errors.
type UnsafeOrderbookServer interface {
	mustEmbedUnimplementedOrderbookServer()
}

func RegisterOrderbookServer(s grpc.ServiceRegistrar, srv OrderbookServer) {
	s.RegisterService(&Orderbook_ServiceDesc, srv)
}

func _Orderbook_AddOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderbookServer).AddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderbook.Orderbook/AddOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderbookServer).AddOrder(ctx, req.(*AddOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderbook_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderbookServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderbook.Orderbook/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderbookServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderbook_AmendOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmendOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderbookServer).AmendOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderbook.Orderbook/AmendOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderbookServer).AmendOrder(ctx, req.(*AmendOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Orderbook_ServiceDesc is the grpc.ServiceDesc for Orderbook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orderbook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orderbook.Orderbook",
	HandlerType: (*OrderbookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrder",
			Handler:    _Orderbook_AddOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Orderbook_CancelOrder_Handler,
		},
		{
			MethodName: "AmendOrder",
			Handler:    _Orderbook_AmendOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/orderbook.proto",
}
